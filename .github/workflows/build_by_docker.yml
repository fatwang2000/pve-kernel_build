name: Build PVE Kernel by Docker

on:
  schedule:
    - cron: '0 18 * * *'  # 每天 中国时间 02:00 触发
  workflow_dispatch:

env:
  REPO_URL: https://git.proxmox.com/git/pve-kernel.git
  REPO_BRANCH: master
  CONFIG_FILE: .config
  SCRIPTS_PATH: ${{ github.workspace }}/scripts
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: true
  TZ: Asia/Shanghai
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Clone source code
        run: git clone $REPO_URL -b $REPO_BRANCH pve-kernel
      
      - name: Fix ACS patch
        run: |
          cd pve-kernel
          sudo chmod a+x $SCRIPTS_PATH/ACS_patch.sh  && $SCRIPTS_PATH/ACS_patch.sh
      
      - name: Fix DEBUG_INFO_BTF
        run: |
          cd pve-kernel
          sed -i 's/${LINUX_TOOLS_DBG_DEB}/# ${LINUX_TOOLS_DBG_DEB}/' Makefile
          
      - name: Disable fwcheck
        run: |
          cd pve-kernel
          sed -i "s/rules fwcheck abicheck/rules abicheck/" debian/rules

      - name: Extract kernel version
        id: extract_version
        run: |
          cd pve-kernel
          KERNEL_VERSION=$(head -n1 debian/changelog | awk '{print $2}' | sed 's/[()]//g')
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_OUTPUT
          echo "Detected kernel version: $KERNEL_VERSION"

      - name: Check if release already exists
        id: check_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view "pve-kernel-${{ steps.extract_version.outputs.kernel_version }}" >/dev/null 2>&1; then
            echo "release is already exists"
            echo "already_exists=true" >> $GITHUB_OUTPUT
          else
            echo "release is not exists"
            echo "already_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Free disk space
        if: steps.check_release.outputs.already_exists == 'false'
        run: |
          # sudo rm -f /swapfile /mnt/swapfile
          sudo docker image prune -a -f
          sudo systemctl stop docker
          sudo snap set system refresh.retain=2
          sudo apt-get -y purge firefox clang* ghc* google* llvm* mono* mongo* mysql* php*
          sudo apt-get -y autoremove --purge
          sudo apt-get clean
          sudo rm -rf /etc/mysql /etc/php /usr/lib/jvm /usr/libexec/docker /usr/local /usr/src/* /var/lib/docker /var/lib/gems /var/lib/mysql /var/lib/snapd /etc/skel /opt/{microsoft,az,hostedtoolcache,cni,mssql-tools,pipx} /usr/share/{az*,dotnet,swift,miniconda,gradle*,java,kotlinc,ri,sbt} /root/{.sbt,.local,.npm}
          # sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          rm -rf ~/{.cargo,.dotnet,.rustup}
          df -Th          
          
      - name: Setting up Docker Environment
        if: steps.check_release.outputs.already_exists == 'false'
        run: |
          sudo apt-get install ca-certificates curl gnupg lsb-release
          sudo mkdir -m 0755 -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          
      - name: Git submodule update
        if: steps.check_release.outputs.already_exists == 'false'
        run: |
          cd pve-kernel
          git submodule update --init --recursive

      - name: Compile the PVE kernel
        if: steps.check_release.outputs.already_exists == 'false'
        id: compile
        run: |
          sudo chmod a+x $SCRIPTS_PATH/dockerun_trixie.sh
          sudo docker run -v ${{ github.workspace }}:/home/build debian:trixie /home/build/scripts/dockerun_trixie.sh
          echo "编译成功，准备release文件..."
          sudo chmod a+w pve-kernel
          cd pve-kernel
          mkdir -p release
          # cp *deb release/
          zipname="pve-kernel-${{ steps.extract_version.outputs.kernel_version }}.zip"
          zip -r9 ./release/$zipname *.deb
          #cd pve-kernel
          #make
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Extract latest changelog entry
        if: steps.check_release.outputs.already_exists == 'false'
        id: extract-changelog
        run: |
          # 提取第一个完整的变更记录（直到下一个版本行）
          # 使用 awk 提取从开始到下一个版本行之前的内容
          awk '
          /^[a-zA-Z0-9].*\([0-9].*\)/ && NR > 1 {exit}  # 遇到下一个版本行时退出
          {print}                                        # 打印当前行
          ' pve-kernel/debian/changelog > latest_changes.txt
          cat latest_changes.txt
          # 提取版本信息
          version_line=$(head -n 1 latest_changes.txt)
          version=$(echo "$version_line" | cut -d' ' -f1)
          version_number=$(echo "$version_line" | awk -F'[()]' '{print $2}')
          distribution=$(echo "$version_line" | awk -F'[; ]' '{print $3}')
          urgency=$(echo "$version_line" | awk -F'[; ]' '{print $5}')
          
          # 提取变更内容 (所有以星号开头的行，直到维护者信息行)
          changes=$(grep -E "^\s*\*" latest_changes.txt | sed 's/^\s*\*\s*//')
          
          # 提取维护者信息 (以"-- "开头的行)
          maintainer_line=$(grep -E "^ -- " latest_changes.txt)
          # 提取维护者信息（去掉日期部分）
          maintainer=$(echo "$maintainer_line" | sed 's/^ -- //' | sed 's/[[:space:]]*[A-Za-z][a-z][a-z],.*$//')
          # 提取日期部分
          date=$(echo "$maintainer_line" | grep -Eo "[A-Za-z]{3}, [0-9]{1,2} [A-Za-z]{3} [0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2} [+-][0-9]{4}")
          
          # 设置输出变量
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "version_number=$version_number" >> $GITHUB_OUTPUT
          echo "distribution=$distribution" >> $GITHUB_OUTPUT
          echo "urgency=$urgency" >> $GITHUB_OUTPUT
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$changes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "maintainer=$maintainer" >> $GITHUB_OUTPUT
          echo "date=$date" >> $GITHUB_OUTPUT
          
      - name: Generate release notes
        if: steps.check_release.outputs.already_exists == 'false'
        run: |
          cat > release_note.MD << EOF
          ## ${{ steps.extract-changelog.outputs.version }} (${{ steps.extract-changelog.outputs.version_number }})
          
          ### 定制化信息
          Fix ACS patch
          Fix DEBUG_INFO_BTF
          Disable fwcheck
          
          ### 变更详情
          ${{ steps.extract-changelog.outputs.changes }}
          
          ### 发布信息
          - **发布版本**: ${{ steps.extract-changelog.outputs.version_number }}
          - **目标发行版**: ${{ steps.extract-changelog.outputs.distribution }}
          - **紧急程度**: ${{ steps.extract-changelog.outputs.urgency }}
          - **维护团队**: ${{ steps.extract-changelog.outputs.maintainer }}
          - **发布时间**: ${{ steps.extract-changelog.outputs.date }}
          EOF
          
      - name: Create GitHub release and upload kernel
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true' && steps.check_release.outputs.already_exists == 'false'
        run: |
          gh release create "pve-kernel-${{ steps.extract_version.outputs.kernel_version }}" \
            pve-kernel/release/*.zip \
            --title "PVE Kernel ${{ steps.extract_version.outputs.kernel_version }}" \
            --notes-file release_note.MD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
