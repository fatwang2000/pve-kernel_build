name: Build PVE Kernel

on:
  schedule:
    - cron: '0 2 * * *'  # 每天 UTC 02:00 触发
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Install base build tools
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            build-essential \
            fakeroot \
            devscripts \
            libncurses5-dev \
            libssl-dev \
            bc \
            kmod \
            cpio \
            git \
            wget \
            sudo \
            lsb-release

      - name: Clone Proxmox kernel repository
        run: |
          git clone https://git.proxmox.com/git/pve-kernel.git
          cd pve-kernel
          git submodule update --init --recursive

      - name: Check for 'bump version' commit
        id: check_commit
        run: |
          cd pve-kernel
          LATEST_COMMIT_MSG=$(git log -1 --pretty=%s)
          echo "LATEST_COMMIT_MSG=$LATEST_COMMIT_MSG" >> $GITHUB_ENV
          echo "latest_commit_message=$LATEST_COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Exit if no 'bump version' commit
        if: contains(steps.check_commit.outputs.latest_commit_message, 'bump version') == false
        run: |
          echo "No 'bump version' commit found. Exiting."
          exit 0

      - name: Extract kernel version
        id: extract_version
        run: |
          cd pve-kernel
          KERNEL_VERSION=$(head -n1 debian/changelog | awk '{print $2}' | sed 's/[()]//g')
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_OUTPUT
          echo "Detected kernel version: $KERNEL_VERSION"

      - name: Check if release already exists
        id: check_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view "pve-kernel-${{ steps.extract_version.outputs.kernel_version }}" >/dev/null 2>&1; then
            echo "already_exists=true" >> $GITHUB_OUTPUT
          else
            echo "already_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip if release exists
        if: steps.check_release.outputs.already_exists == 'true'
        run: |
          echo "Release already exists. Skipping build."
          exit 0

      - name: Build PVE kernel
        run: |
          cd pve-kernel
          make build-dir-fresh
          make deb


      - name: Create GitHub release and upload kernel
        run: |
          gh release create "pve-kernel-${{ steps.extract_version.outputs.kernel_version }}" \
            pve-kernel/*.deb \
            --title "PVE Kernel ${{ steps.extract_version.outputs.kernel_version }}" \
            --notes "Automatically built PVE kernel ${{ steps.extract_version.outputs.kernel_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
