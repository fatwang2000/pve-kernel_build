name: Build test

on:
  schedule:
    - cron: '0 18 * * *'  # 每天 中国时间 02:00 触发
  workflow_dispatch:

env:
  REPO_URL: https://git.proxmox.com/git/pve-kernel.git
  REPO_BRANCH: master
  CONFIG_FILE: .config
  SCRIPTS_PATH: ${{ github.workspace }}/scripts
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: true
  TZ: Asia/Shanghai
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Clone source code
        run: git clone $REPO_URL -b $REPO_BRANCH pve-kernel
      
      - name: Fix ACS patch
        run: |
          cd pve-kernel
          sudo chmod a+x $SCRIPTS_PATH/ACS_patch.sh  && $SCRIPTS_PATH/ACS_patch.sh
      
      - name: Fix DEBUG_INFO_BTF
        run: |
          cd pve-kernel
          sed -i 's/${LINUX_TOOLS_DBG_DEB}/# ${LINUX_TOOLS_DBG_DEB}/' Makefile
          
      - name: Disable fwcheck
        run: |
          cd pve-kernel
          sed -i "s/rules fwcheck abicheck/rules abicheck/" debian/rules

      - name: Extract kernel version
        id: extract_version
        run: |
          cd pve-kernel
          KERNEL_VERSION=$(head -n1 debian/changelog | awk '{print $2}' | sed 's/[()]//g')
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_OUTPUT
          echo "Detected kernel version: $KERNEL_VERSION"

        
      - name: Extract latest changelog entry
        id: extract-changelog
        run: |
          # 提取最新版本信息 (前10行通常包含一个完整的变更记录)
          head -n 10 pve-kernel/debian/changelog > latest_changes.txt
          
          # 提取版本信息
          version_line=$(head -n 1 pve-kernel/debian/changelog)
          version=$(echo "$version_line" | cut -d' ' -f1)
          version_number=$(echo "$version_line" | awk -F'[()]' '{print $2}')
          distribution=$(echo "$version_line" | awk -F'[; ]' '{print $3}')
          urgency=$(echo "$version_line" | awk -F'[; ]' '{print $5}')
          
          # 提取变更内容 (所有以星号开头的行)
          changes=$(grep -E "^\s*\*" latest_changes.txt | sed 's/^\s*\*\s*//')
          
          # 提取维护者信息 (以"-- "开头的行)
          maintainer_line=$(grep -E "^ -- " latest_changes.txt)
          maintainer=$(echo "$maintainer_line" | sed 's/^ -- //' | awk '{$NF=""; print $0}' | sed 's/[[:space:]]*$//')
          date=$(echo "$maintainer_line" | grep -Eo "[A-Za-z]{3}, [0-9]{1,2} [A-Za-z]{3} [0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2} [+-][0-9]{4}")
          
          # 设置输出变量
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "version_number=$version_number" >> $GITHUB_OUTPUT
          echo "distribution=$distribution" >> $GITHUB_OUTPUT
          echo "urgency=$urgency" >> $GITHUB_OUTPUT
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$changes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "maintainer=$maintainer" >> $GITHUB_OUTPUT
          echo "date=$date" >> $GITHUB_OUTPUT
          
      - name: Generate release notes
        run: |
          cat > release_note.MD << EOF
          ## ${{ steps.extract-changelog.outputs.version }} (${{ steps.extract-changelog.outputs.version_number }})
          
          ### 变更详情
          ${{ steps.extract-changelog.outputs.changes }}
          
          ### 发布信息
          - **发布版本**: ${{ steps.extract-changelog.outputs.version_number }}
          - **目标发行版**: ${{ steps.extract-changelog.outputs.distribution }}
          - **紧急程度**: ${{ steps.extract-changelog.outputs.urgency }}
          - **维护团队**: ${{ steps.extract-changelog.outputs.maintainer }}
          - **发布时间**: ${{ steps.extract-changelog.outputs.date }}
          EOF
          cat release_note.MD
